stages:
  # - lint
  - build
  # - test
  - build-image
  - deploy

variables:
  IMAGE_NAME: lkslyj2/ops_docker
  CONTRAINER_NAME: docker-proj
    
# test:
#   stage: test
#   script:
#     - echo "TEST"

build:
  stage: build
  tags:
    - dockerrunner
  image: openjdk:17
  services:
    - name: docker:dind
      alias: dockerdaemon
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/ # Tell docker CLI how to talk to Docker daemon.
    DOCKER_DRIVER: overlay2 # Use the overlayfs driver for improved performance.
    DOCKER_TLS_CERTDIR: "" # Disable TLS since we're running inside local network.
  script:
    - echo 'STARTING JAVA SPRING APPLICATION BUILDING...'
    - ./mvnw clean package
    - cd ./target
    - ls -al
  artifacts:
    paths:
      - target/*.jar
    when: on_success
    
# test:
#   stage: test
#   script:
#     - echo "TEST"

build-image:
  stage: build-image
  tags:
    - dockerrunner
  image: docker:latest
  services:
    - name: docker:dind
      alias: dockerdaemon
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://dockerdaemon:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - ls -al
    - docker build -t $IMAGE_NAME:latest .
    - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
    - docker push $IMAGE_NAME:latest
    - docker images
  only:
    - develop
    - main

deploy-dev:
  stage: deploy
  tags:
    - shellrunner
  variables:
    DEPLOY_PORT: "8001"
    MESSAGE: "PROD"
  script:
    - export SERVER_MESSAGE="$MESSAGE"
    - docker rmi -f $IMAGE_NAME || true
    - docker container ls -a
    - docker rm -f $CONTRAINER_NAME-dev || true
    - docker run -d -p $DEPLOY_PORT:$DEPLOY_PORT --name $CONTRAINER_NAME-dev --restart always $IMAGE_NAME:latest --build-arg DEPLOY_PORT=$DEPLOY_PORT --build-arg MESSAGE=$MESSAGE
    - docker container ls -a
  only:
    - develop

deploy-prod:
  stage: deploy
  tags:
    - shellrunner
  variables:
    DEPLOY_PORT: "8002"
    MESSAGE: "PROD"
  script:
    - export SERVER_MESSAGE="$MESSAGE"
    - docker rmi -f $IMAGE_NAME || true
    - docker container ls -a
    - docker rm -f $CONTRAINER_NAME-prod || true
    - docker run -d -p $DEPLOY_PORT:$DEPLOY_PORT --name $CONTRAINER_NAME-prod --restart always $IMAGE_NAME:latest --build-arg DEPLOY_PORT=$DEPLOY_PORT --build-arg MESSAGE=$MESSAGE
    - docker container ls -a
  only:
    - main